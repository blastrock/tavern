exports_files([
    "pytest.ini",
    ".flake8",
])

load("@rules_python//python:packaging.bzl", "py_wheel")

py_wheel(
    name = "tavern_wheel",
    author = "Michael Boulton",
    classifiers = [
        "Development Status :: 5 - Production/Stable",
        "Intended Audience :: Developers",
        "Framework :: Pytest",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Topic :: Utilities",
        "Topic :: Software Development :: Testing",
        "License :: OSI Approved :: MIT License",
    ],
    console_scripts = {"tavern-ci": "tavern.entry:main"},
    description_file = "README.rst",
    distribution = "tavern",
    entry_points = {
        "console_scripts": ["tavern-ci = tavern.entry:main"],
        "pytest11": ["tavern = tavern.testutils.pytesthook"],
        "tavern_http": ["requests = tavern._plugins.rest.tavernhook:TavernRestPlugin"],
        "tavern_mqtt": ["paho-mqtt = tavern._plugins.mqtt.tavernhook"],
    },
    homepage = "https://taverntesting.github.io/",
    license = "MIT",
    python_tag = "py3",
    requires = [
        "PyYAML>=5.3.1,<7",
        "pykwalify>=1.8.0,<2",
        "requests>=2.22.0,<3",
        "pyjwt>=2.4.0,<3",
        "paho-mqtt>=1.3.1,<=1.5.1",
        "jmespath<1",
        "pytest>=6.2,<8",
        "python-box>4,<6",
        "stevedore>=3.5.2,<4",
    ],
    version = "1.11.1",
    visibility = ["//visibility:public"],
    deps = [
        "//tavern",
        "//tavern/_core/pytest",
        "//tavern/_core/schema",
        "//tavern/_plugins",
        "//tavern/_plugins/mqtt",
        "//tavern/_plugins/rest",
    ],
)

# gazelle:lang py
# gazelle:exclude bazel-*
# gazelle:exclude build
# gazelle:exclude dist
# gazelle:exclude example
# gazelle:exclude .git
# gazelle:exclude .github
# gazelle:exclude .idea
# gazelle:exclude .ijwb
# gazelle:exclude .pytest_cache
# gazelle:exclude **/__pycache__
# gazelle:exclude .run
# gazelle:exclude scripts
# gazelle:exclude tavern.egg-info
# gazelle:exclude .tox
# gazelle:exclude docs/

load("@rules_python//python:pip.bzl", "compile_pip_requirements")

compile_pip_requirements(
    name = "requirements",
    extra_args = ["--allow-unsafe"],
    tags = ["requires-network"],
)

load("@tavern_pip//:requirements.bzl", "all_whl_requirements")
load("@rules_python//gazelle/manifest:defs.bzl", "gazelle_python_manifest")
load("@rules_python//gazelle/modules_mapping:def.bzl", "modules_mapping")

modules_mapping(
    name = "modules_map",
    wheels = all_whl_requirements,
)

gazelle_python_manifest(
    name = "gazelle_python_manifest",
    modules_mapping = ":modules_map",
    pip_repository_incremental = True,
    pip_repository_name = "tavern_pip",
    requirements = "//:requirements.txt",
)

load("@bazel_gazelle//:def.bzl", "gazelle")
load("@rules_python//gazelle:def.bzl", "GAZELLE_PYTHON_RUNTIME_DEPS")

gazelle(
    name = "gazelle",
    data = GAZELLE_PYTHON_RUNTIME_DEPS,
    gazelle = "@rules_python//gazelle:gazelle_python_binary",
)

alias(
    name = "isort",
    actual = "@tavern_pip_isort//:rules_python_wheel_entry_point_isort",
)

alias(
    name = "pylint",
    actual = "@tavern_pip_pylint//:rules_python_wheel_entry_point_pylint",
)

alias(
    name = "black",
    actual = "@tavern_pip_black//:rules_python_wheel_entry_point_black",
)

load("//bazel:lint.bzl", "file_count_rule")

file_count_rule(
    name = "file_count",
    deps = [":tavern_wheel"],
)
